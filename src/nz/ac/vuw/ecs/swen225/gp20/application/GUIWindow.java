/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package nz.ac.vuw.ecs.swen225.gp20.application;

import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import nz.ac.vuw.ecs.swen225.gp20.maze.Maze;
import nz.ac.vuw.ecs.swen225.gp20.maze.Move;
import nz.ac.vuw.ecs.swen225.gp20.maze.SingleMove;
import nz.ac.vuw.ecs.swen225.gp20.recnplay.Event;
import nz.ac.vuw.ecs.swen225.gp20.recnplay.EventListener;
import nz.ac.vuw.ecs.swen225.gp20.recnplay.RecordedGame;
import nz.ac.vuw.ecs.swen225.gp20.recnplay.Replay;
import nz.ac.vuw.ecs.swen225.gp20.render.Render;

import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;

/**
 *
 * @author camilalis 300504575
 * From Master
 */
public class GUIWindow extends javax.swing.JFrame {

  /**.
   * Creates new form Window
   */
  public GUIWindow() {
    numberOnPanel();
    initComponents();
    this.eventListener = EventListener.eventListenerFactory();
    this.setFocusable(true);
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gameCanvas = new javax.swing.JPanel();
        boardCanvas = new javax.swing.JPanel();
        levelAndTimer = new javax.swing.JPanel();
        levelText = new javax.swing.JLabel();
        levelNumber = new javax.swing.JLabel();
        timerText = new javax.swing.JLabel();
        timer = new javax.swing.JLabel();
        chipsLeft = new javax.swing.JLabel();
        chipsleftText2 = new javax.swing.JLabel();
        autoReplay = new javax.swing.JButton();
        forwards = new javax.swing.JButton();
        speedChooser = new javax.swing.JSlider();
        changeSpeedText = new javax.swing.JLabel();
        inventoryPanel = new javax.swing.JPanel();
        inventoryText = new javax.swing.JLabel();
        item0 = new javax.swing.JLabel();
        item1 = new javax.swing.JLabel();
        item2 = new javax.swing.JLabel();
        item3 = new javax.swing.JLabel();
        item4 = new javax.swing.JLabel();
        item5 = new javax.swing.JLabel();
        item6 = new javax.swing.JLabel();
        item7 = new javax.swing.JLabel();
        inventoryText1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        gameMenu = new javax.swing.JMenu();
        rulesLegend = new javax.swing.JMenuItem();
        fileMenu = new javax.swing.JMenu();
        saveButton = new javax.swing.JMenuItem();
        replayButton = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setBackground(new java.awt.Color(0, 207, 18));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                keyReleasedSetMove(evt);
            }
        });

        gameCanvas.setBackground(new java.awt.Color(0, 208, 18));

        boardCanvas.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        boardCanvas.setMaximumSize(new java.awt.Dimension(45000, 45000));
        boardCanvas.setPreferredSize(new java.awt.Dimension(450, 450));

        javax.swing.GroupLayout boardCanvasLayout = new javax.swing.GroupLayout(boardCanvas);
        boardCanvas.setLayout(boardCanvasLayout);
        boardCanvasLayout.setHorizontalGroup(
            boardCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 450, Short.MAX_VALUE)
        );
        boardCanvasLayout.setVerticalGroup(
            boardCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 450, Short.MAX_VALUE)
        );

        levelAndTimer.setBackground(new java.awt.Color(204, 204, 204));
        levelAndTimer.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, null, null, new java.awt.Color(102, 102, 102)));

        levelText.setBackground(new java.awt.Color(0, 0, 0));
        levelText.setFont(new java.awt.Font("Arial Narrow", 1, 48)); // NOI18N
        levelText.setForeground(new java.awt.Color(0, 153, 153));
        levelText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        levelText.setText("L E V E L");

        levelNumber.setBackground(new java.awt.Color(204, 204, 204));
        levelNumber.setFont(new java.awt.Font("Arial Narrow", 1, 80)); // NOI18N
        levelNumber.setForeground(new java.awt.Color(0, 0, 204));
        levelNumber.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        levelNumber.setToolTipText("");
        levelNumber.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        levelNumber.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        timerText.setFont(new java.awt.Font("Arial Narrow", 1, 48)); // NOI18N
        timerText.setForeground(new java.awt.Color(0, 153, 153));
        timerText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        timerText.setText("T I M E");
        timerText.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        timer.setBackground(new java.awt.Color(204, 204, 204));
        timer.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 48)); // NOI18N
        timer.setForeground(new java.awt.Color(0, 0, 204));
        timer.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        timer.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        timer.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        chipsLeft.setBackground(new java.awt.Color(204, 204, 204));
        chipsLeft.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 48)); // NOI18N
        chipsLeft.setForeground(new java.awt.Color(0, 0, 204));
        chipsLeft.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        chipsLeft.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        chipsLeft.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        chipsleftText2.setFont(new java.awt.Font("Arial Narrow", 1, 48)); // NOI18N
        chipsleftText2.setForeground(new java.awt.Color(0, 153, 153));
        chipsleftText2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        chipsleftText2.setText("C H I P S");
        chipsleftText2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout levelAndTimerLayout = new javax.swing.GroupLayout(levelAndTimer);
        levelAndTimer.setLayout(levelAndTimerLayout);
        levelAndTimerLayout.setHorizontalGroup(
            levelAndTimerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(levelAndTimerLayout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(levelAndTimerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(levelNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(timerText, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(timer, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chipsleftText2, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chipsLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(68, Short.MAX_VALUE))
            .addComponent(levelText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        levelAndTimerLayout.setVerticalGroup(
            levelAndTimerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(levelAndTimerLayout.createSequentialGroup()
                .addComponent(levelText, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(levelNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(timerText, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(timer, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(chipsleftText2, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(chipsLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
        );

        timerText.getAccessibleContext().setAccessibleName("time");

        autoReplay.setBackground(new java.awt.Color(51, 51, 255));
        autoReplay.setForeground(new java.awt.Color(255, 255, 255));
        autoReplay.setText("A U T O R E P L A Y");
        autoReplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoReplayActionPerformed(evt);
            }
        });

        forwards.setBackground(new java.awt.Color(51, 51, 255));
        forwards.setForeground(new java.awt.Color(255, 255, 255));
        forwards.setText(">");
        forwards.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forwardsActionPerformed(evt);
            }
        });

        speedChooser.setMaximum(10);
        speedChooser.setPaintLabels(true);
        speedChooser.setPaintTicks(true);
        speedChooser.setValue(5);

        changeSpeedText.setBackground(new java.awt.Color(51, 51, 255));
        changeSpeedText.setForeground(new java.awt.Color(255, 255, 255));
        changeSpeedText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        changeSpeedText.setText("C H A N G E   S P E E D");
        changeSpeedText.setAutoscrolls(true);

        inventoryPanel.setBackground(new java.awt.Color(204, 204, 204));
        inventoryPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        inventoryText.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        inventoryText.setForeground(new java.awt.Color(0, 153, 153));
        inventoryText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        inventoryText.setText("I N V E N T O R Y");
        inventoryText.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        item0.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        item1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        item2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        item3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        item4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        item5.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        item6.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        item7.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout inventoryPanelLayout = new javax.swing.GroupLayout(inventoryPanel);
        inventoryPanel.setLayout(inventoryPanelLayout);
        inventoryPanelLayout.setHorizontalGroup(
            inventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inventoryPanelLayout.createSequentialGroup()
                .addGroup(inventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(inventoryPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(inventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(item0, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(item4, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(inventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(inventoryPanelLayout.createSequentialGroup()
                                .addComponent(item5, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(item6, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(item7, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(inventoryPanelLayout.createSequentialGroup()
                                .addComponent(item1, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(item2, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(item3, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(inventoryPanelLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(inventoryText, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        inventoryPanelLayout.setVerticalGroup(
            inventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inventoryPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(inventoryText, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(inventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(item0, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(item1, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(item2, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(item3, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(inventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(item4, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(item5, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(item6, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(item7, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(37, Short.MAX_VALUE))
        );

        inventoryText1.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        inventoryText1.setForeground(new java.awt.Color(255, 255, 255));
        inventoryText1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        inventoryText1.setText("Replay Mode Controls");
        inventoryText1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout gameCanvasLayout = new javax.swing.GroupLayout(gameCanvas);
        gameCanvas.setLayout(gameCanvasLayout);
        gameCanvasLayout.setHorizontalGroup(
            gameCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gameCanvasLayout.createSequentialGroup()
                .addGroup(gameCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(gameCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(gameCanvasLayout.createSequentialGroup()
                            .addGap(57, 57, 57)
                            .addComponent(boardCanvas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(gameCanvasLayout.createSequentialGroup()
                            .addGap(141, 141, 141)
                            .addComponent(inventoryText1, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, gameCanvasLayout.createSequentialGroup()
                            .addGap(70, 70, 70)
                            .addGroup(gameCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(speedChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(gameCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(forwards, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(autoReplay, javax.swing.GroupLayout.DEFAULT_SIZE, 437, Short.MAX_VALUE)))))
                    .addGroup(gameCanvasLayout.createSequentialGroup()
                        .addGap(206, 206, 206)
                        .addComponent(changeSpeedText, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 160, Short.MAX_VALUE)
                .addGroup(gameCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(levelAndTimer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inventoryPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(107, 107, 107))
        );
        gameCanvasLayout.setVerticalGroup(
            gameCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gameCanvasLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(gameCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(levelAndTimer, javax.swing.GroupLayout.PREFERRED_SIZE, 456, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, gameCanvasLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(boardCanvas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(gameCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(gameCanvasLayout.createSequentialGroup()
                        .addComponent(inventoryText1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(forwards, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(autoReplay, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(changeSpeedText, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(speedChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(inventoryPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        gameMenu.setText("Game");

        rulesLegend.setText("Instructions - Rules");
        rulesLegend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rulesLegendActionPerformed(evt);
            }
        });
        gameMenu.add(rulesLegend);

        jMenuBar1.add(gameMenu);

        fileMenu.setText("File");

        saveButton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        saveButton.setText("Save Game");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        fileMenu.add(saveButton);

        replayButton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        replayButton.setText("Replay Game");
        replayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                replayButtonActionPerformed(evt);
            }
        });
        fileMenu.add(replayButton);

        jMenuBar1.add(fileMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(gameCanvas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(6, 6, 6))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(gameCanvas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

  //----------- this has to be deleted before submitting ------
  private void loadBottonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadBottonActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_loadBottonActionPerformed

  private void saveBottonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBottonActionPerformed
    EventListener.getRecord().saveToJson();
  }//GEN-LAST:event_saveBottonActionPerformed


  private void loadBottonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loadBottonMouseClicked
    // TODO add your handling code here:

  }//GEN-LAST:event_loadBottonMouseClicked

  private void jFileChooser2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFileChooser2ActionPerformed
    // TODO add your handling code here:

  }//GEN-LAST:event_jFileChooser2ActionPerformed

  // ---------- until here -------

      /**
       * Forms a warning message if user wins game bottom.
       */
      private void formWindowWon() {
        gameCountdown.pause();
        if (level == 1) {
          int confirm = JOptionPane.showConfirmDialog(null,
              "Congratulations! You have won\nDo you want to play level 2?",
              "Game Won", JOptionPane.WARNING_MESSAGE);
          if (confirm == JOptionPane.OK_OPTION) {
            level = 2;
            setLevelNumber(level);
            gameCountdown = new GameTimer(1, 60);
          }else if( confirm == JOptionPane.CANCEL_OPTION) {
            System.exit(0); //close all windows
          }
        } else{
          display(" Congratulations!\nYou completed all levels");
          System.exit(0);
        }
      }

      /**
       * Forms a warning message if user clicks exit bottom.
       * @param evt default event.
       */
      private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        //stores data locally before this timer gets destroyed on c.paused()
        pausedAtMin = gameCountdown.getCurrentMin();
        pausedAtSec = gameCountdown.getCurrentSec();
        gameCountdown.pause();
        int confirm = JOptionPane.showConfirmDialog(null,
            "Are you sure you want to leave this match?\n You will lose all your progress if\n you leave without saving",
            "Leave Game?", JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);
        if (confirm == JOptionPane.OK_OPTION) {
          //closes all windows
          System.exit(0);
        }else if( confirm == JOptionPane.OK_CANCEL_OPTION && mode.equals(modes.Run.name())){
          //new timer continues from where it was left of.
          gameCountdown = new GameTimer(pausedAtMin,pausedAtSec);
        }
      }//GEN-LAST:event_formWindowClosing

      /**
       * Forms the window when running the game and allows user to select a level.
       * @param evt default event
       */
      private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        int numSelected;
        JRadioButton one = new JRadioButton("1");
        JRadioButton two = new JRadioButton("2");
        forwards.setEnabled(false);
        autoReplay.setEnabled(false);
        mode = modes.Run.name();
        //Group the radio buttons.
        ButtonGroup levelSelected = new ButtonGroup();
        levelSelected.add(one);
        levelSelected.add(two);
        //Default option, level one
        one.setSelected(true);
        final JComponent[] inputs = new JComponent[]{
            new JLabel("Choose a level to play"),
            one,
            two,
        };
        int result = JOptionPane.showConfirmDialog(null, inputs, "Welcome", JOptionPane.PLAIN_MESSAGE);
        if (result == JOptionPane.OK_OPTION) {
          if (one.isSelected()) {
            numSelected = 1;
          }else if( two.isSelected()){
            numSelected = 2;
          } else{
            //Here user has clicked OK without choosing option
            System.exit(0);
            return;
          }

          // New timer for every game (2 minutes long)
          gameCountdown = new GameTimer(1, 60);
          setLevelNumber(numSelected);
          boardCanvas.setVisible(false);
          render = new Render(m);
          boardCanvas = render.getView();
          gameCanvas.add(boardCanvas);
          boardCanvas.setLocation(70, 35);
          validate();
          repaint();
          setVisible(true);
        }else {
          System.exit(0);  //changed to prevent bug when closing
        }
      }//GEN-LAST:event_formWindowOpened

      /**
       * Processes users input to move Chap around the board.
       * @param evt arrow key released.
       */
      private void keyReleasedSetMove(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_keyReleasedSetMove

          if( !mode.equals("Replay"))  {
              requestFocus();
          }
          SingleMove sMove;
          if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
              sMove = new SingleMove(Move.Direction.LEFT);
          } else if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
              sMove = new SingleMove(Move.Direction.DOWN);
          } else if (evt.getKeyCode() == KeyEvent.VK_RIGHT) {
              sMove = new SingleMove(Move.Direction.RIGHT);
          } else if (evt.getKeyCode() == KeyEvent.VK_UP) {
              sMove = new SingleMove(Move.Direction.UP);
          } else {
              return;
          }
          m.movePlayer(sMove);
          render.updateRender();
          setChipsLeft();
          this.eventListener.onEvent(Event.eventOfChapMove(sMove));

          boardCanvas.setVisible(true);
          //        render = new Render(m);
          //        boardCanvas = render.getView();
          gameCanvas.add(boardCanvas);
          boardCanvas.setLocation(70, 35);
          validate();
          repaint();
          setVisible(true);
          if (m.getStatus().name().equals("GAME_WON")) {
              this.formWindowWon();
          }
          transferFocus();
      //}

      }//GEN-LAST:event_keyReleasedSetMove

      /**
       * Processes users input when the button for autoReplay is pressed.
       * @param evt autoReplay button clicked.
       */
      private void autoReplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoReplayActionPerformed
        // TODO add your handling code here:
          forwards.setEnabled(false);
        while(i < actions.size()){
            parseActionObject((JsonObject) actions.get(i));
            i++;
        }
      }//GEN-LAST:event_autoReplayActionPerformed

      /**
       * Processes users input when the button for moving forwards is pressed.
       * @param evt '>' button clicked.
       */
      private void forwardsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forwardsActionPerformed
        // TODO add your handling code here:
         parseActionObject((JsonObject) actions.get(i));
         System.out.println((actions.get(i).getAsString()));
         i++; // increases index to move onto next action
      }//GEN-LAST:event_forwardsActionPerformed

      /**
       * Processes users input when the button for saving is pressed.
       * @param evt save button on game menu is clicked.
       */
      private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {
    //GEN-FIRST:event_saveButtonActionPerformed
        EventListener.getRecord().saveToJson();
      }//GEN-LAST:event_saveButtonActionPerformed

      /**
       * Processes users input when the button for displaying rules is pressed.
       * @param evt rules and instructions button clicked on the game menu.
       */
      private void rulesLegendActionPerformed(java.awt.event.ActionEvent evt) {
    //GEN-FIRST:event_rulesLegendActionPerformed
        pausedAtMin = gameCountdown.getCurrentMin();
        pausedAtSec = gameCountdown.getCurrentSec();
        gameCountdown.pause();
        display(" ~ Use the arrows on your key board to move Chap around the board.\n"
            +" ~ To win the game make sure you collect all the chips on \n"
            +"the board within 2 minutes and go to the blue tile.\n"
            +" ~ Open doors by collecting keys of the same color.\n"
            +" ~ On level 2 do not let the bug reach Chap!\n"
            +" ~ If you want to see all your moves play Replay mode.\n"
            + "Use the \">\" button to replay forwards step by step (Default).\n"
            +"You can also save the game and resume later by going to \"File\" and\n"
            +"click on \"Save\"");
        if( mode.equals(modes.Run.name())) {
            gameCountdown = new GameTimer(pausedAtMin, pausedAtSec);
        }
      }//GEN-LAST:event_rulesLegendActionPerformed

    /**
     * Activated when user clicks on Replay.
     * Uploads JsonFile and parsers level.
     * @param evt
     */
    private void replayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_replayButtonActionPerformed
            // FIXME: Pause the app timer, do not countdown time when user is choosing recorded game in JSON file
            // FIXME: Set app to replay mode
                // FIXME: Call RecordnReplay module to load replay iterator and the iterator has no latency by default
                // FIXME: When the iterator is retrieved, load the first event to get the level first
                //        If the first event is not SetLevel event (level is not positive int), raise exception
                //        Load the map corresponding to level number, at the time being, below buttons shall be visible to user
                //        "Next", "Adjust Speed", "Auto Replay"
                //        However, the default mode shall be step-by-step prior to any pressoing on above buttons
                //        * On action of "Next": call iterator to read next event, call the replay module method to turn this event back to movement
                //        * On action of "Adjust Speed": suggested default latency is 1(s) and scope is 0.5 to 3 and unit is 0.5
                //                                       When latency is selected from GUI, call the iterator method and it will change latency internally
                //        * On "Auto Replay": Just loop the iterator and call correpsonding method to turn event to Movement and execute the movement as usual
                //        A kind reminder: when app is in "replay" mode, the EventListenser.OnEvent() shall never be called

                //        Special notes: The replay is just one-directional, it has "Next" but there is no "Back" to simplify the logic
                //        Use Case Impacts: If user click to replay, there is no graceful way designed so far to get back to previous on-going game.
            //store variables locally to be able to re construct a new timer from where the old one was paused.
            pausedAtMin = gameCountdown.getCurrentMin();
            pausedAtSec = gameCountdown.getCurrentSec();
            gameCountdown.pause();

            JsonFileFilter fileFilter = new JsonFileFilter();

            timer.setText("-:- -"); // Timer is not applicable during replay mode

            // Allow user to use buttons for Replay mode
            forwards.setEnabled(true);
            autoReplay.setEnabled(true);

            fileChooser.setDialogTitle("Open Json File to Replay a match");
            fileChooser.setFileFilter(fileFilter);

            int returnVal = fileChooser.showOpenDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = fileChooser.getSelectedFile();
                System.out.println("Selected game record: " + file.getAbsolutePath());

                //update game state
                mode = modes.Replay.name();
                replay = new Replay(file);

                try(FileReader reader = new FileReader(file)) {
                    Object obj = JsonParser.parseReader(reader);
                    JsonObject jsonObject = (JsonObject) obj;

                    int replayLevel = jsonObject.get("level").getAsInt();
                    //Check level is within boundaries
                    if( replayLevel < 0 || replayLevel > 2){
                        throw new Exception("Level number not valid");
                    }else{
                        //level is correct, load level
                        setLevelNumber(replayLevel); // Not sure about this??
                        recordedGame = new RecordedGame(replayLevel);
                    }
                    actions = (JsonArray) jsonObject.get("actions");
                    System.out.println(actions.toString());
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else {
                System.out.println("File access cancelled by user.");
                // FIXME: Resume the app timer, return to current game
                mode = modes.Run.name(); //Game is back to running mode
                gameCountdown = new GameTimer(pausedAtMin, pausedAtSec); //resume timer
            }
        }//GEN-LAST:event_replayButtonActionPerformed

    /**
     * Parses the actions array from JsonFile to replay game.
     * Method is called when user clicks on auto-replay and iterates through the array
     * automatically.
     * @param actions list from selected Json file.
     */
    private void parseActionObject(JsonObject actions){

            //Get action object within list
            JsonObject actionObject = (JsonObject) actions.get("actions");

           // construct event
            Event.Type a = Event.Type.valueOf(actionObject.get("type").toString());
            int replayLevel = actionObject.get("level").getAsInt();
            SingleMove singleMove = new SingleMove(Move.Direction.valueOf(actionObject.
                    get("direction").toString()));
            boolean chapDies =actionObject.get("chapDies").getAsBoolean();
            Event event = new Event( a, replayLevel, singleMove, chapDies);
            recordedGame.addAction(event);
            System.out.println(event.toString());
        }

      /**.
       * @param args the command line arguments
       */
      public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
          for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            if ("Nimbus".equals(info.getName())) {
              javax.swing.UIManager.setLookAndFeel(info.getClassName());
              break;
            }
          }
        } catch (ClassNotFoundException ex) {
          java.util.logging.Logger.getLogger(GUIWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
          java.util.logging.Logger.getLogger(GUIWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
          java.util.logging.Logger.getLogger(GUIWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
          java.util.logging.Logger.getLogger(GUIWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
          public void run() {
            new GUIWindow().setVisible(true);
          }
        });
      }

        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JButton autoReplay;
        private javax.swing.JPanel boardCanvas;
        private javax.swing.JLabel changeSpeedText;
        private static javax.swing.JLabel chipsLeft;
        private javax.swing.JLabel chipsleftText2;
        private javax.swing.JMenu fileMenu;
        private javax.swing.JButton forwards;
        private javax.swing.JPanel gameCanvas;
        private javax.swing.JMenu gameMenu;
        private javax.swing.JPanel inventoryPanel;
        private javax.swing.JLabel inventoryText;
        private javax.swing.JLabel inventoryText1;
        private javax.swing.JLabel item0;
        private javax.swing.JLabel item1;
        private javax.swing.JLabel item2;
        private javax.swing.JLabel item3;
        private javax.swing.JLabel item4;
        private javax.swing.JLabel item5;
        private javax.swing.JLabel item6;
        private javax.swing.JLabel item7;
        private javax.swing.JMenuBar jMenuBar1;
        private javax.swing.JPanel levelAndTimer;
        private javax.swing.JLabel levelNumber;
        private javax.swing.JLabel levelText;
        private javax.swing.JMenuItem replayButton;
        private javax.swing.JMenuItem rulesLegend;
        private javax.swing.JMenuItem saveButton;
        private javax.swing.JSlider speedChooser;
        private static javax.swing.JLabel timer;
        private javax.swing.JLabel timerText;
        // End of variables declaration//GEN-END:variables
      // Game variables
        private final JFileChooser fileChooser = new JFileChooser();
      private static ImageIcon[] numberImg = new ImageIcon[10];
      private String mode;
      private int level;
      private enum modes { Run, Load, Save, Replay}

      private GameTimer gameCountdown;
      private Render render;
      private Maze m;
      private EventListener eventListener;
      private int pausedAtMin;
      private int pausedAtSec;
      private Replay replay;
      private  RecordedGame recordedGame;
      private JsonArray actions;
      private int i = 0;

      /**
       * initialize the number images  by linking each face to its image and storing them.
       */
      public void numberOnPanel() {
        for (int i = 0; i < numberImg.length; i++) {
          numberImg[i] = new ImageIcon("/nz/ac/vuw/ecs/swen225/gp20/application/data/numbers/" + i + ".png");
          //set the size
          numberImg[i].setImage(numberImg[i].getImage().getScaledInstance(90, 100, Image.SCALE_DEFAULT));

        }
      }

      /**
       * Display board grid on the GUI by receiving information from the Render module.
       * @return return a canvas for the Render module to display it in the game's GUI.
       */
      public JPanel getBoardCanvas() {
        return boardCanvas;
      }

        /**
         * Displays the number of treausures left on the board.
         */
      private void setChipsLeft(){
          if( level==1) {
              int chips = 7 - m.getChipsLeft();
              chipsLeft.setText( chips + " / 7");
          }
      }
      /**
       * Displays the level on the GUI by receiving the information from the maze
       * module.
       * @param level level chosen by user.
       */
      private void setLevelNumber(int level) {
        this.level = level;
        levelNumber.setText("0" + level);
        this.eventListener.onEvent(Event.eventOfLevelSetting(level));
        try {
          m =  new Maze(level);
        } catch (IOException e) {
          e.printStackTrace();
        }
      }

      /**
       * Countdown for game when players initializes the game.
       * @return countdown for game
       */
      public static JLabel getTimer(){ return timer;}


      /**
       *Mode or status to tell the gui what actions should be performed.
       * @return game mode ( loading, saving, running, replaying).
       */
      public String getMode() {
        return mode;
      }

      /**
       * Set current game mode.
       * @param mode index of the mode within the modes enum
       */
      public void setMode( int mode){
        if( mode > modes.values().length || mode < 0){
          throw new IndexOutOfBoundsException(" Index must be within 0-3");
        }
        this.mode = modes.values()[mode].name();
      }

      /**
       * Set current game mode.
       * @param mode Name of the mode within the modes enum.
       */
      public void setMode( String mode){
        for( int i = 0; i < modes.values().length; i++) {
          if(!mode.equals(modes.values()[i])){
            throw new NullPointerException("Mode not found. Check for spelling errors");
          }
          this.mode = modes.valueOf(mode).name();
        }
      }

      /**.
       *
       * @param data message to be displayed.
       */
      public static void display(String data) {
        int result = JOptionPane.showConfirmDialog(null, data, "Alert", JOptionPane.PLAIN_MESSAGE);
      }

    }
